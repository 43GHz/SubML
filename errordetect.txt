class student:
    elist = []
    def __init__(self, id):
        self.id = id

    def errorlist(self, list):
        self.elist.append(list)

def neg(minu,sub,ans):#arguments as interger,return 1 if error detected,0 if no error
    ans=abs(ans)
    if ans==abs(minu-sub) or ans==abs(minu+sub):
        if minu<0 and sub<0:#both numbers-ve-subtract =neg1
            s.errorlist("neg1")
        elif minu<0 and sub>0:#minu<sub-add-result -ve=neg2
            s.errorlist("neg2")
        elif minu>0 and sub<0:
            s.errorlist("neg3")#minu>sub-add-result +ve=neg3
        return 1
    else:
        return 0
        
def basicsub(s,correct,ans):
    right_ans = digits(correct)
    std_ans = digits(ans)
    s1 = len(right_ans)
    s2 = len(std_ans)
    if s2 > s1 or ans > correct:
        print("Basic Concept Fault")
        s.elist('BasicError')

    def borrow(min,sub,ans,a):
    an=[]
    count=0
    for i in range (0,len(sub)):
        if a==4:
            if min[i]==0:
                min[i]=9
        if a==3 and i!=len(sub)-1:
            if min[i+1]<sub[i+1]:
                sub[i+1]-=1
            else:
                min[i+1]+=-1
        if min[i]<sub[i]: # line 5
            if a!=8:
                min[i]+=10
                an.append(min[i]-sub[i])
            if min[i+1]>sub[i+1]:
                if a==2:
                    min[i+1]-=1
                if a==5:
                    sub[i+1]-=1
                if a==8:
                    if min[i+1]==0:
                        an.append(sub[i+1])
                        min[i+2]+=10
                    else:
                        an.append(min[i]-sub[i])
                        min[i+1]-=1
        else:
            an.append(min[i]-sub[i])
        count+=1
    for i in range(0,len(min)-len(sub)):
        an.append(min[i+count])
    count=0
    for i in range(0,len(ans)):
        if an[i]==ans[i]:
            count+=1
    if count==len(ans):
        s.errorlist(a)

